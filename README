CS342 Project: Concurrent TCP/UDP Client-Server Application

--------------------------------------------------------------------------------------------

A multi-threaded C++ client-server application that demonstrates concurrent network programming with configurable scheduling policies and comprehensive performance analysis capabilities.

--------------------------------------------------------------------------------------------

Project Overview
* This project implements a sophisticated client-server architecture designed to analyze and compare TCP and UDP protocol performance under different server scheduling strategies. The server uses advanced threading techniques and queue management to handle multiple concurrent clients while maintaining fairness and optimal resource utilization.

--------------------------------------------------------------------------------------------

# File Structure
text
CS342-Project/
├── server.hh              # Server class declaration
├── server.cpp             # Server implementation with threading
├── client.hh              # Client class declaration  
├── client.cpp             # Client implementation
├── message.hh             # Protocol message definitions
├── message.cpp            # Message serialization utilities
├── Makefile               # Build configuration
├── test.sh               # Automated testing suite
├── plot.py               # Performance visualization script
└── README.md             # This file


--------------------------------------------------------------------------------------------

# Prerequisites
C++ Compiler: GCC 7+ or Clang 5+ with C++17 support

Build Tools: Make, POSIX-compliant system (Linux/macOS)

Python 3.8+: For data analysis and visualization

Required Libraries: pandas, matplotlib, seaborn

Building the Project
bash
# Clone and navigate to project directory
git clone <https://github.com/Maneesh-s-k/networks_lab.git>

# Compile server and client
make clean && make

# Verify build success
ls -la server client

--------------------------------------------------------------------------------------------

Usage :

### Server
The server requires a port number and a scheduling policy (1 for FCFS, 2 for RR). You can also provide an optional CSV filename for performance logging.

bash
# FCFS scheduling on port 8080
./server 8080 1

# Round-Robin with performance logging
./server 8080 2 performance_data.csv


### Client
The client requires the server's IP, port, protocol, message size (in KB), and the number of messages to send.

bash
# Send 10 messages of 16 KB each using UDP
./client 127.0.0.1 8080 udp 16 10

# Send 5 messages of 32 KB each using TCP
./client 127.0.0.1 8080 tcp 32 5
Testing
Automated Testing Suite
bash

--------------------------------------------------------------------------------------------


# Make test script executable
chmod +x test.sh

# Run comprehensive performance tests
./test.sh
This will generate performance data files for both FCFS and RR scheduling policies.

Manual Testing Examples
bash
# Single client test
./client 127.0.0.1 8080 udp 16 5

# Multiple concurrent clients (for RR demonstration)
./client 127.0.0.1 8080 tcp 32 10 &
./client 127.0.0.1 8080 tcp 32 10 &
./client 127.0.0.1 8080 tcp 32 10 &
wait
Data Analysis and Visualization
Setup Python Environment
bash

# Create virtual environment
python3 -m venv analysis-env
source analysis-env/bin/activate

# Install dependencies
pip install pandas matplotlib seaborn numpy
Generate Performance Graphs
bash

# Create visualizations
python3 plot.py

# View generated graphs
open graphs/throughput_comparison.png
open graphs/scheduling_fairness.png
Protocol Design
Message Protocol


Negotiation Phase (TCP):
Client → Server: {protocol, size_kb, client_pid}
Server → Client: {assigned_data_port}
Data Transfer Phase (TCP/UDP):
Client → Server: {data_payload}
Server → Client: {transfer_complete}

--------------------------------------------------------------------------------------------

## Output Files
The system generates several types of output:

* Console Output: Real-time connection and transfer status

* CSV Files: Machine-readable performance data with columns for policy, protocol, message size, transfer time, and throughput in performance_data_fcfs.csv and performance_data_rr.csv

* Graph Files: Visual comparisons of protocol performance and scheduling fairness in /Graph

--------------------------------------------------------------------------------------------

## Scheduling Implementation

FCFS Policy: 
* Maintains per-client request queues
* Processes all requests from Client A before Client B
* Optimal for batch processing scenarios

Round-Robin Policy:
* Cycles through active clients
* One request per client per scheduling round
* Ensures fair resource allocation under load

--------------------------------------------------------------------------------------------

## Configuration Parameters
Server Parameters
Parameter	Description	Valid Values
Port	TCP listening port	1024-65535
Policy	Scheduling algorithm	1 (FCFS), 2 (RR)
CSV File	Performance log path	Any valid file path
Client Parameters
Parameter	Description	Valid Values
Server IP	Target server address	IPv4 address
Port	Server port number	Must match server
Protocol	Transfer protocol	tcp, udp
Message Size	Payload size in KB	1-1024 (UDP: 1-32)
Message Count	Number of requests	1-1000

--------------------------------------------------------------------------------------------

## Troubleshooting Common Issues

* Port Already in Use:

bash
# Find and kill existing server
lsof -ti:8080 | xargs kill -9
Permission Denied:

bash
# Use port > 1024 for non-root execution
./server 8081 1
Build Errors:

bash
# Ensure C++17 support
g++ --version  # Should be 7.0+
make clean && make CXXFLAGS="-std=c++17"

--------------------------------------------------------------------------------------------

## Performance Issues
* Low Throughput: Increase message sizes, reduce client count
* Unfair Scheduling: Ensure concurrent client execution for RR testing
* Memory Leaks: Run with valgrind for debugging

--------------------------------------------------------------------------------------------




